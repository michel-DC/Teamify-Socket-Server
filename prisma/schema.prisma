generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email               String               @unique
  password            String
  firstname           String?
  lastname            String?
  createdAt           DateTime             @default(now())
  organizationCount   Int                  @default(0)
  uid                 String               @id @default(cuid())
  updatedAt           DateTime             @updatedAt
  profileImage        String?
  googleId            String?              @unique
  bio                 String?
  dateOfBirth         DateTime?
  location            Json?
  phone               String?
  website             String?
  event               Event[]
  notifications       Notification[]
  organizations       Organization[]
  organizationInvites OrganizationInvite[] @relation("InvitedBy")
  organizationMembers OrganizationMember[]
  userByRole          UserByRole?
  conversationMembers ConversationMember[]
  messages            Message[]
  messageReceipts     MessageReceipt[]
}

model Organization {
  id                      Int                      @id @default(autoincrement())
  name                    String
  bio                     String?
  profileImage            String?
  memberCount             Int
  mission                 String
  createdAt               DateTime                 @default(now())
  ownerUid                String
  updatedAt               DateTime                 @updatedAt
  location                Json?
  organizationType        OrganizationType
  members                 Json?                    @default("[]")
  publicId                String?                  @unique @default(cuid())
  eventCount              Int                      @default(0)
  isDeleted               Boolean                  @default(false)
  events                  Event[]
  notifications           Notification[]
  owner                   User                     @relation(fields: [ownerUid], references: [uid], onDelete: Cascade)
  organizationInvites     OrganizationInvite[]
  organizationMembers     OrganizationMember[]
  organizationPermissions OrganizationPermissions?
  conversations           Conversation[]
}

model Event {
  id                    Int                    @id @default(autoincrement())
  title                 String
  description           String?
  location              String
  imageUrl              String?
  capacity              Int
  status                EventStatus            @default(A_VENIR)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  orgId                 Int
  budget                Float?
  category              EventCategory          @default(REUNION)
  isPublic              Boolean                @default(true)
  isCancelled           Boolean                @default(false)
  endDate               DateTime?
  startDate             DateTime?
  preparationPercentage Int                    @default(0)
  publicId              String                 @unique @default(cuid())
  eventCode             String                 @unique
  ownerUid              String
  locationCoords        Json?
  eventByCode           EventByCode            @relation(fields: [eventCode], references: [eventCode], onDelete: Cascade)
  organization          Organization           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  owner                 User                   @relation(fields: [ownerUid], references: [uid], onDelete: Cascade)
  invitations           Invitation[]
  notifications         Notification[]
  preparationTodos      PreparationTodo[]
  preparationTodoGroups PreparationTodoGroup[]
}

model Invitation {
  id            Int              @id @default(autoincrement())
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  eventCode     String
  receiverEmail String
  receiverName  String
  respondedAt   DateTime?
  sentAt        DateTime         @default(now())
  invitationId  String?          @unique @default(cuid())
  event         Event            @relation(fields: [eventCode], references: [eventCode], onDelete: Cascade)

  @@unique([eventCode, receiverEmail])
}

model PreparationTodoGroup {
  id        Int               @id @default(autoincrement())
  name      String
  color     String            @default("#3b82f6")
  order     Int               @default(0)
  eventId   Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  todos     PreparationTodo[]
  event     Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model PreparationTodo {
  id          Int                   @id @default(autoincrement())
  title       String
  done        Boolean               @default(false)
  eventId     Int
  createdAt   DateTime              @default(now())
  groupId     Int?
  order       Int                   @default(0)
  updatedAt   DateTime              @updatedAt
  assignedTo  String?
  description String?
  event       Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
  group       PreparationTodoGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model EventByCode {
  id        Int      @id @default(autoincrement())
  eventCode String   @unique
  publicId  String
  title     String
  createdAt DateTime @default(now())
  ownerUid  String
  updatedAt DateTime @updatedAt
  event     Event?
}

model UserByRole {
  userFirstName String?
  userRole      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userUid       String   @id
  user          User     @relation(fields: [userUid], references: [uid], onDelete: Cascade)
}

model OrganizationInvite {
  id             Int             @id @default(autoincrement())
  inviteCode     String          @unique @default(cuid())
  email          String
  receiverName   String
  status         OrgInviteStatus @default(PENDING)
  invitedByUid   String
  organizationId Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  invitedBy      User            @relation("InvitedBy", fields: [invitedByUid], references: [uid], onDelete: Cascade)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
}

model OrganizationMember {
  id             Int              @id @default(autoincrement())
  userUid        String
  organizationId Int
  createdAt      DateTime         @default(now())
  role           OrganizationRole @default(MEMBER)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userUid], references: [uid], onDelete: Cascade)

  @@unique([organizationId, userUid])
}

model OrganizationPermissions {
  id                                Int          @id @default(autoincrement())
  organizationId                    Int          @unique
  adminsCanModifyEvents             Boolean      @default(true)
  adminsCanDeleteEvents             Boolean      @default(true)
  adminsCanInviteEventParticipants  Boolean      @default(true)
  adminsCanInviteMembers            Boolean      @default(true)
  adminsCanModifyOrg                Boolean      @default(false)
  membersCanInviteEventParticipants Boolean      @default(false)
  membersCanInviteMembers           Boolean      @default(false)
  createdAt                         DateTime     @default(now())
  updatedAt                         DateTime     @updatedAt
  organization                      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Notification {
  id                      Int              @id @default(autoincrement())
  publicId                String           @unique @default(cuid())
  notificationName        String
  notificationDescription String
  notificationDate        DateTime         @default(now())
  isRead                  Boolean          @default(false)
  notificationType        NotificationType @default(INFO)
  eventPublicId           String?
  organizationPublicId    String?
  userUid                 String
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  event                   Event?           @relation(fields: [eventPublicId], references: [publicId], onDelete: Cascade)
  organization            Organization?    @relation(fields: [organizationPublicId], references: [publicId], onDelete: Cascade)
  user                    User             @relation(fields: [userUid], references: [uid], onDelete: Cascade)
}

model Conversation {
  id             String           @id @default(cuid())
  type           ConversationType
  title          String?
  organizationId Int?
  createdAt      DateTime         @default(now())

  members      ConversationMember[]
  messages     Message[]
  organization Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ConversationMember {
  id             String     @id @default(cuid())
  conversationId String
  userId         String
  role           MemberRole @default(MEMBER)
  joinedAt       DateTime   @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  attachments    Json?
  createdAt      DateTime @default(now())

  conversation Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User             @relation(fields: [senderId], references: [uid], onDelete: Cascade)
  receipts     MessageReceipt[]

  @@index([conversationId, createdAt])
}

model MessageReceipt {
  id        String        @id @default(cuid())
  messageId String
  userId    String
  status    ReceiptStatus
  timestamp DateTime      @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@unique([messageId, userId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum OrgInviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum OrganizationType {
  ASSOCIATION
  PME
  ENTREPRISE
  STARTUP
  AUTO_ENTREPRENEUR
}

enum EventStatus {
  A_VENIR
  EN_COURS
  TERMINE
  ANNULE
}

enum EventCategory {
  REUNION
  SEMINAIRE
  CONFERENCE
  FORMATION
  ATELIER
  NETWORKING
  CEREMONIE
  EXPOSITION
  CONCERT
  SPECTACLE
  AUTRE
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  INVITATION
  REMINDER
  UPDATE
}

enum ConversationType {
  PRIVATE
  GROUP
}

enum MemberRole {
  MEMBER
  ADMIN
}

enum ReceiptStatus {
  DELIVERED
  READ
}
